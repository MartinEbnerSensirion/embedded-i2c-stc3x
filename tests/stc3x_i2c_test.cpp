/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:     sensirion-driver-generator 0.38.1
 * Product:       stc3x
 * Model-Version: 1.0.0
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include "stc3x_i2c.h"
#include <inttypes.h>
#include <stdio.h>

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

TEST_GROUP (STC3X_Tests) {
    void setup() {
        stc3x_init(0x29);
    }
};

TEST (STC3X_Tests, test_get_product_id1) {
    int16_t local_error = 0;
    uint32_t product_id = 0;
    uint64_t serial_number = 0;
    local_error = stc3x_get_product_id(&product_id, &serial_number);
    CHECK_EQUAL_ZERO_TEXT(local_error, "get_product_id");
    printf("product_id: %u ", product_id);
    printf("serial_number: %" PRIx64 "\n", serial_number);
}

TEST (STC3X_Tests, test_set_binary_gas1) {
    int16_t local_error = 0;
    local_error = stc3x_set_binary_gas(19);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_binary_gas");
}

TEST (STC3X_Tests, test_set_relative_humidity_raw1) {
    int16_t local_error = 0;
    local_error = stc3x_set_relative_humidity_raw(32768);
    CHECK_EQUAL_ZERO_TEXT(local_error, "set_relative_humidity_raw");
}

TEST (STC3X_Tests, test_measure_gas_concentration_raw1) {
    int16_t local_error = 0;
    uint16_t gas_ticks = 0;
    uint16_t temperature_ticks = 0;
    local_error =
        stc3x_measure_gas_concentration_raw(&gas_ticks, &temperature_ticks);
    CHECK_EQUAL_ZERO_TEXT(local_error, "measure_gas_concentration_raw");
    printf("gas_ticks: %u ", gas_ticks);
    printf("temperature_ticks: %u\n", temperature_ticks);
}

TEST (STC3X_Tests, test_self_test1) {
    int16_t local_error = 0;
    stc3x_test_result_t self_test_output = {.value = 0u};
    local_error = stc3x_self_test(&self_test_output);
    CHECK_EQUAL_ZERO_TEXT(local_error, "self_test");
    printf("self_test_output: %02x\n", self_test_output.value);
}

TEST (STC3X_Tests, test_enable_automatic_self_calibration1) {
    int16_t local_error = 0;
    local_error = stc3x_enable_automatic_self_calibration();
    CHECK_EQUAL_ZERO_TEXT(local_error, "enable_automatic_self_calibration");
}

TEST (STC3X_Tests, test_disable_automatic_self_calibration1) {
    int16_t local_error = 0;
    local_error = stc3x_disable_automatic_self_calibration();
    CHECK_EQUAL_ZERO_TEXT(local_error, "disable_automatic_self_calibration");
}

TEST (STC3X_Tests, test_forced_recalibration1) {
    int16_t local_error = 0;
    local_error = stc3x_forced_recalibration(0);
    CHECK_EQUAL_ZERO_TEXT(local_error, "forced_recalibration");
}

TEST (STC3X_Tests, test_enter_sleep_mode1) {
    int16_t local_error = 0;
    local_error = stc3x_enter_sleep_mode();
    CHECK_EQUAL_ZERO_TEXT(local_error, "enter_sleep_mode");
    local_error = stc3x_exit_sleep_mode();
    CHECK_EQUAL_ZERO_TEXT(local_error, "exit_sleep_mode");
}
